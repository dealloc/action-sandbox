name: Release

on:
  release:
    types: [ published ]

env:
  app_name: DungeonRS

  # OSX variables
  app_id: dealloc.dungeon_rs
jobs:
  build:
    name: Build ${{ matrix.label }}
    permissions:
      contents: write
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - platform: linux
            label: editor-linux-x64
            binary: dungeonrs_editor
            target: x86_64-unknown-linux-gnu
            profile: release
            features: dungeonrs_editor/linux
            package_ext: .zip
            runner: ubuntu-latest

          - platform: windows
            label: editor-windows-x64
            binary: dungeonrs_editor
            target: x86_64-pc-windows-msvc
            profile: release
            features: dungeonrs_editor/windows
            binary_ext: .exe
            package_ext: .zip
            runner: windows-latest

          - platform: macos
            label: editor-macos-arm
            binary: dungeonrs_editor
            target: aarch64-apple-darwin
            profile: release
            features: dungeonrs_editor/macos
            app_suffix: .app/Contents/MacOS
            package_ext: .dmg
            runner: macos-latest
            package: true

#          - platform: macos
#            label: macos-x64
#            target: x86_64-apple-darwin
#            profile: release
#            app_suffix: .app/Contents/MacOS
#            package_ext: .dmg
#            runner: macos-latest
    defaults:
      run:
        shell: bash

    steps:
      # Extract version embedded in the tag.
      # This step expects the tag to be one of the following formats:
      #   - "v<major>.<minor>.<patch>" (e.g., "v1.2.3")
      #   - "<major>.<minor>.<patch>"  (e.g., "1.2.3")
      - name: Extract Version From Tag
        id: get_version
        uses: battila7/get-version-action@v2

      - name: Set up environment
        if: ${{ matrix.platform == 'macos' }}
        run: |
          echo 'MACOSX_DEPLOYMENT_TARGET=11.0' >> "${GITHUB_ENV}" # macOS 11.0 Big Sur is the first version to support universal binaries.
          echo "SDKROOT=$(xcrun --sdk macosx --show-sdk-path)" >> "${GITHUB_ENV}"

      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Populate cargo cache
        uses: Leafwing-Studios/cargo-cache@v2
        with:
          sweep-cache: true

      - name: Install dependencies (Linux)
        if: ${{ matrix.platform == 'linux' }}
        run: sudo apt-get update; sudo apt-get install --no-install-recommends libasound2-dev libudev-dev libwayland-dev libxkbcommon-dev

      - name: Build ${{ matrix.label }} binaries
        run: cargo build --release --locked --workspace --target="${{ matrix.target }}" --no-default-features --features='${{ matrix.features }}'

      - name: Generate package files for ${{ matrix.label }}
        run: |
          mkdir -p tmp/${{ matrix.label }}/${{ matrix.binary }}/${{ matrix.binary }}${{ matrix.app_suffix }}
          cp -r ./assets tmp/${{ matrix.label }}/${{ matrix.binary }}/${{ matrix.binary }}${{ matrix.app_suffix }}
          mv target/${{ matrix.target }}/release/${{ matrix.binary }}${{ matrix.binary_ext }} tmp/${{ matrix.label }}/${{ matrix.binary }}/${{ matrix.binary }}${{ matrix.app_suffix }}

      - name: Generate OSX metadata
        if: ${{ matrix.platform == 'macos' && matrix.package == true }}
        run: |


      - name: Package Linux package
        if: ${{ matrix.platform == 'linux' }}
        working-directory: tmp/${{ matrix.label }}/${{ matrix.binary }}
        run: zip --recurse-paths '${{ matrix.binary }}-${{ matrix.label }}${{ matrix.package_ext }}' '.'

      - name: Package OSX package
        if: ${{ matrix.platform == 'macos' && matrix.package == true }}
        working-directory: tmp/${{ matrix.label }}/${{ matrix.binary }}
        run: |
            cat >'tmp/${{ matrix.label }}/${{ matrix.binary }}/${{ matrix.binary }}${{ matrix.app_suffix }}/../Info.plist' <<EOF
            <?xml version="1.0" encoding="UTF-8"?>
            <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
            <plist version="1.0">
                <dict>
                    <key>CFBundleDevelopmentRegion</key>
                    <string>en</string>
                    <key>CFBundleDisplayName</key>
                    <string>${{ env.app_name }}</string>
                    <key>CFBundleExecutable</key>
                    <string>${{ matrix.binary }}</string>
                    <key>CFBundleIdentifier</key>
                    <string>${{ env.app_id }}</string>
                    <key>CFBundleName</key>
                    <string>${{ env.app_name }}</string>
                    <key>CFBundleShortVersionString</key>
                    <string>v${{ steps.get_version.outputs.version-without-v }}</string>
                    <key>CFBundleVersion</key>
                    <string>v${{ steps.get_version.outputs.version-without-v }}</string>
                    <key>CFBundleInfoDictionaryVersion</key>
                    <string>6.0</string>
                    <key>CFBundlePackageType</key>
                    <string>APPL</string>
                    <key>CFBundleSupportedPlatforms</key>
                    <array>
                        <string>MacOSX</string>
                    </array>
                </dict>
            </plist>
            EOF
          ln -s /Applications .
          codesign --deep --force --sign - "${{ matrix.binary }}.app"
          hdiutil create -fs HFS+ -volname ${{ matrix.binary }} -srcfolder . '${{ matrix.binary }}-${{ matrix.label }}${{ matrix.package_ext }}'

      - name: Package Windows package
        if: ${{ matrix.platform == 'windows' }}
        working-directory: tmp/${{ matrix.label }}/${{ matrix.binary }}
        shell: pwsh
        run: Compress-Archive -Path ${{ matrix.binary }} -DestinationPath '${{ matrix.binary }}-${{ matrix.label }}${{ matrix.package_ext }}'

      # Update the GitHub release with the manifest and module archive files.
      - name: Update Release With Files
        id: create_version_release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          name: ${{ github.event.release.name }}
          draft: ${{ github.event.release.unpublished }}
          prerelease: ${{ github.event.release.prerelease }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: 'tmp/${{ matrix.label }}/${{ matrix.binary }}/${{ matrix.binary }}-${{ matrix.label }}${{ matrix.package_ext }}'
          tag: ${{ github.event.release.tag_name }}
          body: ${{ github.event.release.body }}
